/*
 * Auth Service
 * This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including 'user', 'admin', 'moderator', 'guest', and 'superadmin'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package authservice.client.api;

import authservice.client.ApiCallback;
import authservice.client.ApiClient;
import authservice.client.ApiException;
import authservice.client.ApiResponse;
import authservice.client.Configuration;
import authservice.client.Pair;
import authservice.client.ProgressRequestBody;
import authservice.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import authservice.client.model.ClientGet200Response;
import authservice.client.model.ClientGet401Response;
import authservice.client.model.LoginClientPost200Response;
import authservice.client.model.LoginClientPost401Response;
import authservice.client.model.RegenerateClientCredentialsPost200Response;
import authservice.client.model.RegisterPost201Response;
import authservice.client.model.RegisterPost400Response;
import authservice.client.model.RegisterPost500Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientGet
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client ID and client secret retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientGetCall(String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarHeaderParams.put("username", localVarApiClient.parameterToString(username));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientGetValidateBeforeCall(String username, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling clientGet(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling clientGet(Async)");
        }

        return clientGetCall(username, password, _callback);

    }

    /**
     * Get client ID and secret
     * Returns the client ID and client secret of the user associated with the provided username and password.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @return ClientGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client ID and client secret retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ClientGet200Response clientGet(String username, String password) throws ApiException {
        ApiResponse<ClientGet200Response> localVarResp = clientGetWithHttpInfo(username, password);
        return localVarResp.getData();
    }

    /**
     * Get client ID and secret
     * Returns the client ID and client secret of the user associated with the provided username and password.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @return ApiResponse&lt;ClientGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client ID and client secret retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientGet200Response> clientGetWithHttpInfo(String username, String password) throws ApiException {
        okhttp3.Call localVarCall = clientGetValidateBeforeCall(username, password, null);
        Type localVarReturnType = new TypeToken<ClientGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get client ID and secret (asynchronously)
     * Returns the client ID and client secret of the user associated with the provided username and password.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client ID and client secret retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientGetAsync(String username, String password, final ApiCallback<ClientGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientGetValidateBeforeCall(username, password, _callback);
        Type localVarReturnType = new TypeToken<ClientGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginClientPost
     * @param clientId User&#39;s client ID (required)
     * @param clientSecret User&#39;s client secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid client credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginClientPostCall(String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/login/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarHeaderParams.put("clientId", localVarApiClient.parameterToString(clientId));
        }

        if (clientSecret != null) {
            localVarHeaderParams.put("clientSecret", localVarApiClient.parameterToString(clientSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginClientPostValidateBeforeCall(String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling loginClientPost(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling loginClientPost(Async)");
        }

        return loginClientPostCall(clientId, clientSecret, _callback);

    }

    /**
     * Logs in a user using client ID and secret
     * Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
     * @param clientId User&#39;s client ID (required)
     * @param clientSecret User&#39;s client secret (required)
     * @return LoginClientPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid client credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public LoginClientPost200Response loginClientPost(String clientId, String clientSecret) throws ApiException {
        ApiResponse<LoginClientPost200Response> localVarResp = loginClientPostWithHttpInfo(clientId, clientSecret);
        return localVarResp.getData();
    }

    /**
     * Logs in a user using client ID and secret
     * Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
     * @param clientId User&#39;s client ID (required)
     * @param clientSecret User&#39;s client secret (required)
     * @return ApiResponse&lt;LoginClientPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid client credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginClientPost200Response> loginClientPostWithHttpInfo(String clientId, String clientSecret) throws ApiException {
        okhttp3.Call localVarCall = loginClientPostValidateBeforeCall(clientId, clientSecret, null);
        Type localVarReturnType = new TypeToken<LoginClientPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logs in a user using client ID and secret (asynchronously)
     * Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
     * @param clientId User&#39;s client ID (required)
     * @param clientSecret User&#39;s client secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid client credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginClientPostAsync(String clientId, String clientSecret, final ApiCallback<LoginClientPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginClientPostValidateBeforeCall(clientId, clientSecret, _callback);
        Type localVarReturnType = new TypeToken<LoginClientPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateClientCredentialsPost
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client credentials regenerated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateClientCredentialsPostCall(String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regenerate-client-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarHeaderParams.put("username", localVarApiClient.parameterToString(username));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateClientCredentialsPostValidateBeforeCall(String username, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling regenerateClientCredentialsPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling regenerateClientCredentialsPost(Async)");
        }

        return regenerateClientCredentialsPostCall(username, password, _callback);

    }

    /**
     * Regenerate client credentials
     * Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @return RegenerateClientCredentialsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client credentials regenerated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RegenerateClientCredentialsPost200Response regenerateClientCredentialsPost(String username, String password) throws ApiException {
        ApiResponse<RegenerateClientCredentialsPost200Response> localVarResp = regenerateClientCredentialsPostWithHttpInfo(username, password);
        return localVarResp.getData();
    }

    /**
     * Regenerate client credentials
     * Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @return ApiResponse&lt;RegenerateClientCredentialsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client credentials regenerated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegenerateClientCredentialsPost200Response> regenerateClientCredentialsPostWithHttpInfo(String username, String password) throws ApiException {
        okhttp3.Call localVarCall = regenerateClientCredentialsPostValidateBeforeCall(username, password, null);
        Type localVarReturnType = new TypeToken<RegenerateClientCredentialsPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate client credentials (asynchronously)
     * Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
     * @param username User&#39;s username (required)
     * @param password User&#39;s password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client credentials regenerated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized (invalid credentials) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateClientCredentialsPostAsync(String username, String password, final ApiCallback<RegenerateClientCredentialsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateClientCredentialsPostValidateBeforeCall(username, password, _callback);
        Type localVarReturnType = new TypeToken<RegenerateClientCredentialsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerPost
     * @param username Unique username for the user (required)
     * @param password User&#39;s password (required)
     * @param role  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (e.g., username already taken) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerPostCall(String username, String password, String role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarHeaderParams.put("username", localVarApiClient.parameterToString(username));
        }

        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }

        if (role != null) {
            localVarHeaderParams.put("role", localVarApiClient.parameterToString(role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerPostValidateBeforeCall(String username, String password, String role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling registerPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling registerPost(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling registerPost(Async)");
        }

        return registerPostCall(username, password, role, _callback);

    }

    /**
     * Registers a new user
     * Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
     * @param username Unique username for the user (required)
     * @param password User&#39;s password (required)
     * @param role  (required)
     * @return RegisterPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (e.g., username already taken) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RegisterPost201Response registerPost(String username, String password, String role) throws ApiException {
        ApiResponse<RegisterPost201Response> localVarResp = registerPostWithHttpInfo(username, password, role);
        return localVarResp.getData();
    }

    /**
     * Registers a new user
     * Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
     * @param username Unique username for the user (required)
     * @param password User&#39;s password (required)
     * @param role  (required)
     * @return ApiResponse&lt;RegisterPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (e.g., username already taken) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterPost201Response> registerPostWithHttpInfo(String username, String password, String role) throws ApiException {
        okhttp3.Call localVarCall = registerPostValidateBeforeCall(username, password, role, null);
        Type localVarReturnType = new TypeToken<RegisterPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registers a new user (asynchronously)
     * Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
     * @param username Unique username for the user (required)
     * @param password User&#39;s password (required)
     * @param role  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (e.g., username already taken) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerPostAsync(String username, String password, String role, final ApiCallback<RegisterPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerPostValidateBeforeCall(username, password, role, _callback);
        Type localVarReturnType = new TypeToken<RegisterPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
